service: streams-dynmamodb

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 512
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  tracing:
    apiGateway: true
    lambda: true # Optional, can be true (true equals 'Active'), 'Active' or 'PassThrough'
  apiGateway:
    restApiId: !ImportValue QldbApiGateway-restApiId
    restApiRootResourceId: !ImportValue QldbApiGateway-rootResourceId
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED	: "1"
    TABLE_NAME: 
      Ref: bicycleLicenceLedgerTable

plugins:
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters
  - serverless-webpack

custom:
  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    includeModules: false   # Node modules configuration for packaging
    packager: 'npm'   # Packager that will be used to package your external modules

functions:
  qldbStreamsDynamoDB:
    name: qldb-streams-dynamodb-${self:provider.stage}
    handler: functions/qldb-streams-dynamodb.handler
    iamRoleStatementsName: qldb-streams-dynamodb-role-${self:provider.stage}
    iamRoleStatements: # Grant privilege read from Kinesis work stream 
    - Effect: Allow 
      Action: 
        - kinesis:GetRecords 
        - kinesis:GetShardIterator 
        - kinesis:DescribeStream 
        - kinesis:ListStreams 
        - kinesis:PutRecord 
        - kinesis:PutRecords 
      Resource: 
        Fn::GetAtt: [licenceQldbStreamsDynamodb, Arn]
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        Fn::GetAtt: [bicycleLicenceLedgerTable, Arn]
    - Effect: "Allow"
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
      Resource:
        Fn::GetAtt: [StreamsFailureQueue, Arn]

  DynamoDBGetLicence:
    name: dynamodb-get-licence-${self:provider.stage}
    handler: functions/dynamodb-search.handler
    events:
      - http:
          path: /dynamodb/{licenceid}
          method: get
    iamRoleStatementsName: dynamodb-get-licence-${self:provider.stage}
    iamRoleStatements: # Grant privilege read from Kinesis work stream 
    - Effect: Allow
      Action:
        - dynamodb:GetItem
      Resource: 
        Fn::GetAtt: [bicycleLicenceLedgerTable, Arn]
    - Effect: "Allow"
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource: "*"

resources:
  Resources:

    licenceQldbStreamsDynamodb: 
      Type: AWS::Kinesis::Stream
      Properties: 
        Name: QLDBBicycleLicence-dynamodb-${self:provider.stage}
        ShardCount: 1
    
    QldbStreamsDynamoDBLambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        TracingConfig:
          Mode: "Active"
    
    bicycleLicenceLedgerTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: qldb-bicycle-licence-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: "pk"
            AttributeType: S
        KeySchema:
          - AttributeName: "pk"
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST


    StreamsFailureQueue:
      Type: AWS::SQS::Queue        

    qldbStreamRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - qldb.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /
        Policies:
          - PolicyName: qldb-bicycle-dynamodb-policy-${self:provider.stage}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - 'kinesis:PutRecord**'
                    - 'kinesis:DescribeStream'
                    - 'kinesis:ListShards'
                  Resource:
                    Fn::GetAtt: [licenceQldbStreamsDynamodb, Arn]
        RoleName: qldb-bicycle-dynamodb-role-${self:provider.stage}

    myQLDBStream:
      Type: "AWS::QLDB::Stream"
      DependsOn: qldbStreamRole
      Properties:
        InclusiveStartTime: "2020-05-29T00:00:00Z"
        KinesisConfiguration:
          AggregationEnabled: true
          StreamArn: 
            Fn::GetAtt: [licenceQldbStreamsDynamodb, Arn]
        LedgerName: !ImportValue qldb-bicycle-licence
        RoleArn: 
          Fn::GetAtt: [qldbStreamRole, Arn]
        StreamName: qldb-bicycle-dynamodb-stream-${self:provider.stage}
        Tags:
          - Key: name
            Value: qldb-bicycle-licence
    
    MyEventSourceMapping:
      Type: AWS::Lambda::EventSourceMapping
      Properties:
        BatchSize: 50
        BisectBatchOnFunctionError: true
        DestinationConfig: 
          OnFailure: 
            Destination: !GetAtt StreamsFailureQueue.Arn
        Enabled: true
        EventSourceArn: !GetAtt licenceQldbStreamsDynamodb.Arn
        FunctionName: !GetAtt QldbStreamsDynamoDBLambdaFunction.Arn
        MaximumRetryAttempts: 1
        StartingPosition: "TRIM_HORIZON"